const { login, checkEmailAndGenerateCode,register } = require("../services/auth.service");
const nodemailer = require("nodemailer");
//=================X·ª≠ l√Ω ƒëƒÉng nh·∫≠p=======================
exports.loginHandler = async (req, res) => {
  try {
    const { email, password } = req.body;
    const result = await login(email, password);
    res.status(200).json(result);
    console.log("ƒêƒÉng nh·∫≠p th√†nh c√¥ng")
    console.log("======================================")
  } catch (err) {
    console.error("‚ùå L·ªói khi ƒëƒÉng nh·∫≠p:", err.message);

    // Ki·ªÉm tra l·ªói do m·∫≠t kh·∫©u ho·∫∑c t√†i kho·∫£n
    if (
      err.message === "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i." ||
      err.message === "M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c."
    ) {
      return res.status(401).json({ message: err.message });
    }

    // L·ªói kh√°c (l·ªói server)
    res.status(500).json({ message: "L·ªói server khi ƒëƒÉng nh·∫≠p." });
  }
};
//=========================== ƒêƒÉng k√≠ m·ªõi ng∆∞·ªùi d√πng ==============================
exports.registerHandler = async (req, res) => {
  try {
    const result = await register(req.body);
    res.status(200).json(result);
    console.log("ƒêƒÉng k√≠ th√†nh c√¥ng")
    console.log("======================================")
  }
  catch (err) {
    console.error("‚ùå L·ªói khi ƒëƒÉng k√≠:", err.message);

  }
};
//===========================X·ª≠ l√Ω ki·ªÉm tra email g·ª≠i m√£=======================

const verificationCodes = {}; // B·ªô nh·ªõ t·∫°m l∆∞u c√°c m√£ x√°c th·ª±c ƒë√£ g·ª≠i

exports.sendVerificationCode = async (req, res) => {
  const { email, use } = req.body;

  if (!email || !use) {
    return res.status(400).json({
      success: false,
      message: "Thi·∫øu email ho·∫∑c m·ª•c ƒë√≠ch (use)",
    });
  }

  try {
    const result = await checkEmailAndGenerateCode(email, use);

    console.log("‚úÖ K·∫øt qu·∫£ ki·ªÉm tra email:", {
      email,
      use,
      success: result.success,
      message: result.message,
    });

    if (!result.success) {
      console.log("‚õî KH√îNG th√†nh c√¥ng, d·ª´ng l·∫°i.");
      return res.status(200).json({
        success: false,
        message: result.message,
      });
    }
    if(re)
    // ‚úÖ CH·ªà khi success === true m·ªõi ch·∫°y ƒëo·∫°n d∆∞·ªõi
    const code = result.code;
    verificationCodes[email] = code;

    res.status(200).json({
      success: true,
      message:
        use === "register"
          ? "‚úÖ M√£ x√°c th·ª±c ƒë√£ ƒë∆∞·ª£c t·∫°o. ƒêang g·ª≠i email..."
          : "üìß M√£ kh√¥i ph·ª•c ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n!",
    });

    // ‚úÖ G·ª≠i email kh√¥ng ƒë·ªìng b·ªô
    setImmediate(async () => {
      try {
        const transporter = nodemailer.createTransport({
          service: "gmail",
          auth: {
            user: process.env.EMAIL_USER,
            pass: process.env.EMAIL_PASS,
          },
        });

        const subject =
          use === "register"
            ? "M√£ x√°c th·ª±c ƒëƒÉng k√Ω"
            : "M√£ x√°c th·ª±c kh√¥i ph·ª•c m·∫≠t kh·∫©u";

        const text = `M√£ x√°c th·ª±c c·ªßa b·∫°n l√†: ${code}`;

        const mailOptions = {
          from: process.env.EMAIL_USER,
          to: email,
          subject,
          text,
        };

        await transporter.sendMail(mailOptions);
        console.log(`‚úÖ ƒê√£ g·ª≠i m√£ x√°c th·ª±c (${use}) ƒë·∫øn: ${email}`);
      } catch (err) {
        console.error("‚ùå G·ª≠i email th·∫•t b·∫°i:", err.message);
      }
    });

  } catch (err) {
    console.error("‚ùå L·ªói x·ª≠ l√Ω sendVerificationCode:", err.message);
    res.status(500).json({
      success: false,
      message: "ƒê√£ x·∫£y ra l·ªói ph√≠a server.",
    });
  }
};
