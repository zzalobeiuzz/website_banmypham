const { login, checkEmailAndGenerateCode, register,generateAndSendVerificationCode,resetPassword } = require("../services/auth.service");
const nodemailer = require("nodemailer");


//=================X·ª≠ l√Ω ƒëƒÉng nh·∫≠p=======================
exports.loginHandler = async (req, res) => {
  try {
    const { email, password } = req.body;
    const result = await login(email, password);
    res.status(200).json(result);
    console.log("ƒêƒÉng nh·∫≠p th√†nh c√¥ng")
    console.log("======================================")
  } catch (err) {
    console.error("‚ùå L·ªói khi ƒëƒÉng nh·∫≠p:", err.message);

    // Ki·ªÉm tra l·ªói do m·∫≠t kh·∫©u ho·∫∑c t√†i kho·∫£n
    if (
      err.message === "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i." ||
      err.message === "M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c."
    ) {
      return res.status(401).json({ message: err.message });
    }

    // L·ªói kh√°c (l·ªói server)
    res.status(500).json({ message: "L·ªói server khi ƒëƒÉng nh·∫≠p." });
  }
};
//=========================== ƒêƒÉng k√≠ m·ªõi ng∆∞·ªùi d√πng ==============================
exports.registerHandler = async (req, res) => {
  try {
    const result = await register(req.body);
    res.status(200).json(result);
    console.log("ƒêƒÉng k√≠ th√†nh c√¥ng")
    console.log("======================================")
  }
  catch (err) {
    console.error("‚ùå L·ªói khi ƒëƒÉng k√≠:", err.message);

  }
};
//=========================== X·ª≠ l√Ω ki·ªÉm tra email g·ª≠i m√£ =======================
exports.sendVerificationCode = async (req, res) => {
  const { email, use } = req.body;

  if (!email || !use) {
    return res.status(400).json({
      success: false,
      message: "Thi·∫øu email ho·∫∑c m·ª•c ƒë√≠ch (use)",
    });
  }

  try {
    // Service ƒë√£ g·ª≠i mail lu√¥n
    const result = await generateAndSendVerificationCode(email, use);

    if (!result.success) {
      return res.status(400).json({
        success: false,
        message: result.message,
      });
    }

    const code = result.code;
    // üíæ L∆∞u session
    req.session.verification = {
      email,
      code,
      expireAt: Date.now() + 15 * 60 * 1000,
    };

    // ‚úÖ Tr·∫£ response
    res.status(200).json({
      success: true,
      message: result.message,
    });
  } catch (err) {
    console.error("‚ùå L·ªói x·ª≠ l√Ω sendVerificationCode:", err.message);
    res.status(500).json({
      success: false,
      message: "ƒê√£ x·∫£y ra l·ªói ph√≠a server.",
    });
  }
};

//====================== RESET PASSWORD ==================
exports.resetPasswordHandler = async (req, res) => {
  try {
    const { code, newPassword } = req.body;

    // Check thi·∫øu tr∆∞·ªùng
    if (!code || !newPassword) {
      return res.status(400).json({ success: false, message: "Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt." });
    }
    // L·∫•y email v√† code t·ª´ session
    const sessionData = req.session.verification;

    if (!sessionData || !sessionData.email || !sessionData.code) {
      return res.status(400).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin x√°c th·ª±c trong session." });
    }

    // Ki·ªÉm tra code
    if (sessionData.code !== code) {
      return res.status(400).json({ success: false, message: "M√£ x√°c th·ª±c kh√¥ng ƒë√∫ng." });
    }

    // (Optional) Ki·ªÉm tra h·∫øt h·∫°n
    if (sessionData.expireAt && sessionData.expireAt < Date.now()) {
      return res.status(400).json({ success: false, message: "M√£ x√°c th·ª±c ƒë√£ h·∫øt h·∫°n." });
    }

    // G·ªçi service reset password
    await resetPassword({ email: sessionData.email, newPassword });

    // X√≥a session sau khi th√†nh c√¥ng
    delete req.session.verification;

    return res.status(200).json({ success: true, message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!" });
  } catch (err) {
    console.error("‚ùå L·ªói reset password:", err.message);
    return res.status(400).json({ success: false, message: err.message });
  }
};
