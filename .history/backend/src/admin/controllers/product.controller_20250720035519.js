// Import c√°c module c·∫ßn thi·∫øt
const productService = require("../services/product.service"); // G·ªçi service x·ª≠ l√Ω logic s·∫£n ph·∫©m
const path = require("path"); // Module x·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n
const fs = require("fs"); // Module thao t√°c v·ªõi file h·ªá th·ªëng
const url = require("url"); // Module x·ª≠ l√Ω URL
const axios = require("axios"); // Th∆∞ vi·ªán g·ªçi HTTP request

// ===================== C·∫¨P NH·∫¨T TH√îNG TIN S·∫¢N PH·∫®M =====================
exports.update = async (req, res) => {
  try {
    const products = req.body; // Nh·∫≠n danh s√°ch s·∫£n ph·∫©m t·ª´ body

    // Ki·ªÉm tra d·ªØ li·ªáu ph·∫£i l√† m·∫£ng
    if (!Array.isArray(products)) {
      return res.status(400).json({ message: "D·ªØ li·ªáu ph·∫£i l√† m·ªôt m·∫£ng s·∫£n ph·∫©m" });
    }

    // C·∫≠p nh·∫≠t t·ª´ng s·∫£n ph·∫©m b·∫±ng service
    for (const product of products) {
      console.log("üëâ Updating product:", product.ProductID);
      await productService.updateProduct(product);
    }

    // Tr·∫£ k·∫øt qu·∫£ th√†nh c√¥ng
    res.status(200).json({ success: true, message: "C·∫≠p nh·∫≠t t·∫•t c·∫£ s·∫£n ph·∫©m th√†nh c√¥ng!" });
  } catch (error) {
    console.error("‚ùå L·ªói update:", error.message);
    res.status(500).json({ message: "C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m" });
  }
};

// ===================== KI·ªÇM TRA S·∫¢N PH·∫®M T·ªíN T·∫†I =====================
exports.checkExisProduct = async (req, res) => {
  const { code } = req.query;

  // Ki·ªÉm tra thi·∫øu m√£
  if (!code) {
    return res.status(400).json({ message: "Thi·∫øu ID s·∫£n ph·∫©m" });
  }

  try {
    // G·ªçi service ki·ªÉm tra s·∫£n ph·∫©m
    const result = await productService.checkProductExistence(code);
    return res.json(result); // Tr·∫£ k·∫øt qu·∫£
  } catch (error) {
    console.error("Controller Error:", error);
    res.status(500).json({ message: "L·ªói server khi ki·ªÉm tra s·∫£n ph·∫©m" });
  }
};

// ===================== TH√äM S·∫¢N PH·∫®M M·ªöI =====================
exports.addProduct = async (req, res) => {
  try {
    // G·ªçi service ƒë·ªÉ x·ª≠ l√Ω to√†n b·ªô logic th√™m s·∫£n ph·∫©m, bao g·ªìm ·∫£nh
    const result = await productService.addProduct(req);

    if (!result.success) {
      return res.status(400).json({ success: false, message: result.message });
    }

    return res.status(200).json({
      success: true,
      message: "Th√™m s·∫£n ph·∫©m th√†nh c√¥ng",
    });
  } catch (err) {
    console.error("‚ùå L·ªói addProduct:", err);
    return res.status(500).json({ success: false, message: "L·ªói server khi th√™m s·∫£n ph·∫©m" });
  }
};

//=======================L·∫§Y TH√îNG TIN S·∫¢N PH·∫®M ƒê·ªÇ HI·ªÇN TH·ªä CHI TI·∫æT==============================
exports.handleProductDetail = async (req, res) => {
  try {

    const { code } = req.query;

    // üü¢ B∆∞·ªõc 1: L·∫•y th√¥ng tin s·∫£n ph·∫©m ch√≠nh
    const result = await productService.getProductDetail(code);
    // ‚ö†Ô∏è N·∫øu kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng c√≥ product
    if (!result || !result.de) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
    }
    // ‚úÖ Tr·∫£ v·ªÅ d·ªØ li·ªáu t·ªïng h·ª£p (ƒë√£ c√≥ detail v√† subCategory n·∫øu c√≥)
    return res.status(200).json({
      success: true,
      data: result.detail,
      message: result.message
    });
  } catch (error) {
    console.error("‚ùå L·ªói khi x·ª≠ l√Ω handleProductDetail:", error.message);
    return res.status(500).json({ success: false, message: "L·ªói server" });
  }
};
