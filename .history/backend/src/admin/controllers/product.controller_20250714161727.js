const productService = require("../services/product.service");
const path = require("path");
const fs = require("fs");
//=========================UPDATE TH√îNG TIN S·∫¢N PH·∫®M====================
exports.update = async (req, res) => {
  try {
    const products = req.body;

    // Ki·ªÉm tra lu√¥n: ph·∫£i l√† m·∫£ng
    if (!Array.isArray(products)) {
      return res
        .status(400)
        .json({ message: "D·ªØ li·ªáu ph·∫£i l√† m·ªôt m·∫£ng s·∫£n ph·∫©m" });
    }

    for (const product of products) {
      console.log("üëâ Updating product:", product.ProductID);

      await productService.updateProduct(product);
    }

    res
      .status(200)
      .json({ success: true, message: "C·∫≠p nh·∫≠t t·∫•t c·∫£ s·∫£n ph·∫©m th√†nh c√¥ng!" });
  } catch (error) {
    console.error("‚ùå L·ªói update:", error.message);
    res.status(500).json({ message: "C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m" });
  }
};
//=========================CHECK S·∫¢N PH·∫®M T·ªíN T·∫†I====================
exports.checkExisProduct = async (req, res) => {
  const { code } = req.query;

  if (!code) {
    return res.status(400).json({ message: "Thi·∫øu ID s·∫£n ph·∫©m" });
  }

  try {
    const result = await productService.checkProductExistence(code);
    return res.json(result);
  } catch (error) {
    console.error("Controller Error:", error);
    res.status(500).json({ message: "L·ªói server khi ki·ªÉm tra s·∫£n ph·∫©m" });
  }
};

// ==========================upload ·∫£nh preview t·ª´ editor=================
// üí• Controller upload ·∫£nh preview (cho ReactQuill)





exports.addProduct = async (req, res) => {
  try {
    const {
      ProductCode,
      Name,
      Price,
      Type,
      CategoryID,
      SubCategoryID,
      StockQuantity,
      SupplierID,
      IsHot,
      Intro,
      Usage,
      Ingredients,
      Instructions,
    } = req.body;

    // N·∫øu c√≥ file ·∫£nh
    let imageUrl = null;
    if (req.file) {
      imageUrl = `/uploads/${req.file.filename}`; // ƒê∆∞·ªùng d·∫´n ·∫£nh
    }

    const productData = {
      productCode: ProductCode,
      name: Name,
      price: Price,
      type: Type,
      categoryId: CategoryID,
      subCategoryId: SubCategoryID,
      stockQuantity: StockQuantity,
      supplierID: SupplierID,
      isHot: IsHot,
      intro: Intro,
      usage: Usage,
      ingredients: Ingredients,
      instructions: Instructions,
      image: imageUrl,
    };

    await productService.createProduct(productData);

    res.status(201).json({ message: "Th√™m s·∫£n ph·∫©m th√†nh c√¥ng!" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Th√™m s·∫£n ph·∫©m th·∫•t b·∫°i!", error: err.message });
  }
};