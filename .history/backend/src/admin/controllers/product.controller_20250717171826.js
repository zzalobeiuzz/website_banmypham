// Import c√°c module c·∫ßn thi·∫øt
const productService = require("../services/product.service"); // G·ªçi service x·ª≠ l√Ω logic s·∫£n ph·∫©m
const path = require("path"); // Module x·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n
const fs = require("fs"); // Module thao t√°c v·ªõi file h·ªá th·ªëng
const url = require("url"); // Module x·ª≠ l√Ω URL
const axios = require("axios"); // Th∆∞ vi·ªán g·ªçi HTTP request

// ===================== C·∫¨P NH·∫¨T TH√îNG TIN S·∫¢N PH·∫®M =====================
exports.update = async (req, res) => {
  try {
    const products = req.body; // Nh·∫≠n danh s√°ch s·∫£n ph·∫©m t·ª´ body

    // Ki·ªÉm tra d·ªØ li·ªáu ph·∫£i l√† m·∫£ng
    if (!Array.isArray(products)) {
      return res.status(400).json({ message: "D·ªØ li·ªáu ph·∫£i l√† m·ªôt m·∫£ng s·∫£n ph·∫©m" });
    }

    // C·∫≠p nh·∫≠t t·ª´ng s·∫£n ph·∫©m b·∫±ng service
    for (const product of products) {
      console.log("üëâ Updating product:", product.ProductID);
      await productService.updateProduct(product);
    }

    // Tr·∫£ k·∫øt qu·∫£ th√†nh c√¥ng
    res.status(200).json({ success: true, message: "C·∫≠p nh·∫≠t t·∫•t c·∫£ s·∫£n ph·∫©m th√†nh c√¥ng!" });
  } catch (error) {
    console.error("‚ùå L·ªói update:", error.message);
    res.status(500).json({ message: "C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m" });
  }
};

// ===================== KI·ªÇM TRA S·∫¢N PH·∫®M T·ªíN T·∫†I =====================
exports.checkExisProduct = async (req, res) => {
  const { code } = req.query;

  // Ki·ªÉm tra thi·∫øu m√£
  if (!code) {
    return res.status(400).json({ message: "Thi·∫øu ID s·∫£n ph·∫©m" });
  }

  try {
    // G·ªçi service ki·ªÉm tra s·∫£n ph·∫©m
    const result = await productService.checkProductExistence(code);
    return res.json(result); // Tr·∫£ k·∫øt qu·∫£
  } catch (error) {
    console.error("Controller Error:", error);
    res.status(500).json({ message: "L·ªói server khi ki·ªÉm tra s·∫£n ph·∫©m" });
  }
};

// ===================== TH√äM S·∫¢N PH·∫®M M·ªöI =====================
exports.addProduct = async (req, res) => {
  try {
    if (req.file) {
      // T·∫°o t√™n file m·ªõi d·ª±a theo originalname
      const ext = path.extname(req.file.originalname);
      const rawName = path.basename(req.file.originalname, ext);
      const filename = `${rawName.replace(/\s+/g, "_")}_${Date.now()}${ext}`;
      
      req.body.Image = filename; // G·ª≠i t√™n n√†y v√†o DB
    }

    // G·ªçi service th√™m s·∫£n ph·∫©m
    const result = await productService.addProduct(req);

    // N·∫øu th·∫•t b·∫°i th√¨ kh√¥ng c·∫ßn l∆∞u file
    if (!result.success) {
      return res.status(400).json({ success: false, message: result.message });
    }

    // ‚úÖ N·∫øu th√†nh c√¥ng, m·ªõi ti·∫øn h√†nh l∆∞u ·∫£nh ra th∆∞ m·ª•c
    if (req.file) {
      const savePath = path.join(__dirname, "../uploads/assets/pictures", req.body.Image);

      // ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i
      fs.mkdirSync(path.dirname(savePath), { recursive: true });

      fs.writeFileSync(savePath, req.file.buffer);
    }

    return res.status(200).json({
      success: true,
      message: "Th√™m s·∫£n ph·∫©m th√†nh c√¥ng",
    });

  } catch (err) {
    console.log("‚ùå L·ªói addProduct:", err);
    return res.status(500).json({ success: false, message: "L·ªói server khi th√™m s·∫£n ph·∫©m" });
  }
};

// ===================== L∆ØU ·∫¢NH NGO√ÄI (BASE64 ho·∫∑c URL) =====================
exports.saveExternalImage = async (req, res) => {
  try {
    let imageUrls = req.body.imageUrls;
    console.log("imageUrls", imageUrls);

    // N·∫øu l√† string th√¨ convert th√†nh array
    if (typeof imageUrls === "string") {
      imageUrls = [imageUrls];
    }

    // Ki·ªÉm tra input h·ª£p l·ªá
    if (!Array.isArray(imageUrls) || imageUrls.length === 0) {
      return res.status(400).json({ message: "Thi·∫øu danh s√°ch URL ·∫£nh" });
    }

    const newUrls = []; // Danh s√°ch URL sau khi l∆∞u th√†nh c√¥ng
    const uploadDir = path.join(__dirname, "../../../../backend/uploads/assets/pictures"); // ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c upload
    fs.mkdirSync(uploadDir, { recursive: true }); // T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i

    // Duy·ªát t·ª´ng ·∫£nh ƒë·ªÉ l∆∞u
    for (const imageUrl of imageUrls) {
      let fileName = "";
      let filePath = "";

      if (imageUrl.startsWith("data:image/")) {
        // üü¢ ·∫¢nh d·∫°ng base64
        const matches = imageUrl.match(/^data:image\/(\w+);base64,(.+)$/);
        if (!matches) {
          throw new Error("Base64 kh√¥ng h·ª£p l·ªá");
        }

        const ext = "jpg"; // M·∫∑c ƒë·ªãnh jpg (c√≥ th·ªÉ c·∫£i ti·∫øn ƒë·ªÉ l·∫•y ƒë√∫ng ƒë·ªãnh d·∫°ng t·ª´ matches[1])
        fileName = `image_${Date.now()}_${Math.floor(Math.random() * 1000)}.${ext}`;
        filePath = path.join(uploadDir, fileName);

        // N·∫øu ·∫£nh ƒë√£ t·ªìn t·∫°i th√¨ b·ªè qua v√† d√πng l·∫°i URL
        if (fs.existsSync(filePath)) {
          console.log("‚ö†Ô∏è ·∫¢nh base64 ƒë√£ t·ªìn t·∫°i:", fileName);
          const newUrl = `http://localhost:5000/uploads/assets/pictures/${fileName}`;
          newUrls.push(newUrl);
          continue;
        }

        // Ghi file t·ª´ base64
        fs.writeFileSync(filePath, Buffer.from(matches[2], "base64"));
        console.log("‚úÖ L∆∞u base64:", fileName);

      } else if (imageUrl.startsWith("http")) {
        // üü¢ ·∫¢nh t·ª´ URL
        const pathname = new URL(imageUrl).pathname;
        fileName = path.basename(pathname);
        filePath = path.join(uploadDir, fileName);

        // N·∫øu ·∫£nh ƒë√£ c√≥ s·∫µn th√¨ b·ªè qua
        if (fs.existsSync(filePath)) {
          console.log("‚ö†Ô∏è ·∫¢nh URL ƒë√£ t·ªìn t·∫°i:", fileName);
          const newUrl = `http://localhost:5000/uploads/assets/pictures/${fileName}`;
          newUrls.push(newUrl);
          continue;
        }

        // G·ªçi request ƒë·ªÉ t·∫£i ·∫£nh
        const response = await axios({
          method: "GET",
          url: imageUrl,
          responseType: "stream", // Nh·∫≠n d·∫°ng stream
        });

        // L∆∞u stream v√†o file
        await new Promise((resolve, reject) => {
          const writer = fs.createWriteStream(filePath);
          response.data.pipe(writer);
          writer.on("finish", resolve);
          writer.on("error", (err) => {
            console.log("‚ùå L·ªói khi ghi file:", err);
            reject(err);
          });
        });
        console.log("‚úÖ L∆∞u URL:", fileName);

      } else {
        console.warn("‚ùå Kh√¥ng h·ªó tr·ª£ ƒë·ªãnh d·∫°ng:", imageUrl);
        continue;
      }

      // Th√™m URL v√†o danh s√°ch ph·∫£n h·ªìi
      const newUrl = `http://localhost:5000/uploads/assets/pictures/${fileName}`;
      newUrls.push(newUrl);
    }

    // G·ª≠i danh s√°ch URL m·ªõi v·ªÅ client
    res.json({ success: true, newUrls });
    console.log("‚úÖ ƒê√£ g·ª≠i response list ·∫£nh v·ªÅ client");

  } catch (error) {
    console.error("‚ùå L·ªói saveExternalImage:", error);
    res.status(500).json({ success: false, message: "L·ªói t·∫£i ·∫£nh external ho·∫∑c base64" });
  }
};
