const { connectDB } = require("../../config/connect");
const sql = require("mssql");

// =========================KI·ªÇM TRA S·∫¢N PH·∫®M====================
/**
 * H√†m ki·ªÉm tra xem s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i hay kh√¥ng
 * @param {string} productId - M√£ s·∫£n ph·∫©m
 * @returns {Promise<boolean>} - true n·∫øu t·ªìn t·∫°i, false n·∫øu kh√¥ng t·ªìn t·∫°i
 */
exports.checkProductExists = async (productId) => {

  const pool = await connectDB();
  const result = await pool.request()
    .input("ProductID", sql.VarChar(50), productId)
    .query(`SELECT * FROM PRODUCT WHERE ProductID = @ProductID`);

  if (result.recordset.length > 0) {
    return result.recordset[0]; // ‚úÖ Tr·∫£ ƒë√∫ng object s·∫£n ph·∫©m
  } else {
    return null; // ‚úÖ Kh√¥ng t√¨m th·∫•y
  }
};

// =========================UPDATE TH√îNG TIN S·∫¢N PH·∫®M====================
/**
 * H√†m c·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m
 * Ch·ªâ c·∫≠p nh·∫≠t c√°c tr∆∞·ªùng ƒë∆∞·ª£c truy·ªÅn v√†o (kh√¥ng b·∫Øt bu·ªôc ph·∫£i truy·ªÅn h·∫øt)
 * @param {object} product - Object ch·ª©a c√°c tr∆∞·ªùng th√¥ng tin s·∫£n ph·∫©m
 * @returns {Promise<object>} - K·∫øt qu·∫£ c·∫≠p nh·∫≠t v·ªõi success & message
 */
exports.updateProduct = async (product) => {
  const pool = await connectDB();

  // Destructure c√°c tr∆∞·ªùng trong object product
  const {
    ProductID,
    ProductName,
    Description,
    IsHot,
    Type,
    Price,
    CategoryID,
    StockQuantity,
    UpdatedAt,
    SupplierID,
    Image,
  } = product;

  // T·∫°o m·∫£ng ch·ª©a c√°c tr∆∞·ªùng c·∫ßn update (ch·ªâ th√™m n·∫øu tr∆∞·ªùng ƒë√≥ c√≥ gi√° tr·ªã)
  const updateFields = [];

  if (ProductName !== undefined) updateFields.push(`ProductName = @ProductName`);
  if (Description !== undefined) updateFields.push(`Description = @Description`);
  if (IsHot !== undefined) updateFields.push(`IsHot = @IsHot`);
  if (Type !== undefined) updateFields.push(`Type = @Type`);
  if (Price !== undefined) updateFields.push(`Price = @Price`);
  if (CategoryID !== undefined) updateFields.push(`CategoryID = @CategoryID`);
  if (StockQuantity !== undefined) updateFields.push(`StockQuantity = @StockQuantity`);
  if (UpdatedAt !== undefined) updateFields.push(`UpdatedAt = @UpdatedAt`);
  if (SupplierID !== undefined) updateFields.push(`SupplierID = @SupplierID`);
  if (Image !== undefined) updateFields.push(`Image = @Image`);

  // N·∫øu kh√¥ng c√≥ tr∆∞·ªùng n√†o ƒë·ªÉ c·∫≠p nh·∫≠t
  if (updateFields.length === 0) {
    return { success: false, message: "Kh√¥ng c√≥ tr∆∞·ªùng n√†o ƒë·ªÉ c·∫≠p nh·∫≠t" };
  }

  // T·∫°o request v·ªõi c√°c input t∆∞∆°ng ·ª©ng
  await pool.request()
    .input("ProductID", sql.VarChar(50), ProductID)
    .input("ProductName", sql.NVarChar(sql.MAX), ProductName ?? null)
    .input("Description", sql.NVarChar(sql.MAX), Description ?? null)
    .input("IsHot", sql.TinyInt, IsHot ?? null)
    .input("Type", sql.NVarChar(sql.MAX), Type ?? null)
    .input("Price", sql.Int, Price ?? null)
    .input("CategoryID", sql.NVarChar(100), CategoryID ?? null)
    .input("StockQuantity", sql.Int, StockQuantity ?? null)
    .input("UpdatedAt", sql.Date, UpdatedAt ?? new Date()) // M·∫∑c ƒë·ªãnh l·∫•y ng√†y hi·ªán t·∫°i n·∫øu kh√¥ng truy·ªÅn v√†o
    .input("SupplierID", sql.NVarChar(100), SupplierID ?? null)
    .input("Image", sql.NVarChar(sql.MAX), Image ?? null)
    .query(`
      UPDATE PRODUCT
      SET ${updateFields.join(", ")}
      WHERE ProductID = @ProductID
    `);

  return { success: true, message: `C·∫≠p nh·∫≠t s·∫£n ph·∫©m ID ${ProductID} th√†nh c√¥ng` };
};



// =========================TH√äM M·ªöI S·∫¢N PH·∫®M====================
/**
 * H√†m th√™m s·∫£n ph·∫©m m·ªõi
 * @param {object} product - Th√¥ng tin s·∫£n ph·∫©m
 * @returns {Promise<object>} - K·∫øt qu·∫£ th√™m
 */

exports.addProductDB = async (product) => {
  const pool = await connectDB();
  const transaction = new sql.Transaction(pool);

  try {
    // üß† 1. Ki·ªÉm tra tr√πng ProductID tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu transaction
    const existingProduct = await exports.checkProductExists(product.ProductID);
    if (existingProduct) {
      return { success: false, message: `S·∫£n ph·∫©m v·ªõi ID ${product.ProductID} ƒë√£ t·ªìn t·∫°i` };
    }

    // ‚úÖ B·∫Øt ƒë·∫ßu transaction
    await transaction.begin();

    const {
      ProductID, ProductName, Price, Type, CategoryID, SubCategoryID,
      StockQuantity, SupplierID, IsHot, Intro, Usage, Ingredients,
      Instructions, Image, DetailID, SubCategoryName, CreatedAt, UpdatedAt
    } = product;

    // üü© 2. Insert PRODUCT
    const productRequest = new sql.Request(transaction);
    await productRequest
      .input("ProductID", sql.VarChar(50), ProductID)
      .input("ProductName", sql.NVarChar(sql.MAX), ProductName)
      .input("DetailID", sql.NVarChar(50), DetailID)
      .input("IsHot", sql.TinyInt, IsHot ?? 0)
      .input("Type", sql.NVarChar(100), Type ?? null)
      .input("Price", sql.Int, Price ?? 0)
      .input("ProdCategoryID", sql.NVarChar(100), CategoryID ?? null)
      .input("StockQuantity", sql.Int, StockQuantity ?? 0)
      .input("SupplierID", sql.NVarChar(100), SupplierID ?? null)
      .input("Image", sql.NVarChar(sql.MAX), Image ?? null)
      .input("CreatedAt", sql.DateTime, CreatedAt ?? new Date())
      .input("UpdatedAt", sql.DateTime, UpdatedAt ?? new Date())
      .query(`
        INSERT INTO PRODUCT
        (ProductID, ProductName, Price, Type, CategoryID, StockQuantity, SupplierID, IsHot, Image, DetailID, CreatedAt, UpdatedAt)
        VALUES
        (@ProductID, @ProductName, @Price, @Type, @ProdCategoryID, @StockQuantity, @SupplierID, @IsHot, @Image, @DetailID, @CreatedAt, @UpdatedAt)
      `);

    // üü© 3. Insert PRODUCT_DETAIL
    const detailRequest = new sql.Request(transaction);
    await detailRequest
      .input("IDDetail", sql.NVarChar(50), DetailID)
      .input("ProductDescription", sql.NVarChar(sql.MAX), Intro ?? null)
      .input("Ingredient", sql.NVarChar(sql.MAX), Ingredients ?? null)
      .input("Usage", sql.NVarChar(sql.MAX), Usage ?? null)
      .input("HowToUse", sql.NVarChar(sql.MAX), Instructions ?? null)
      .query(`
        INSERT INTO PRODUCT_DETAIL
        (IDDetail, ProductDescription, Ingredient, Usage, HowToUse)
        VALUES
        (@IDDetail, @ProductDescription, @Ingredient, @Usage, @HowToUse)
      `);

    // üü© 4. Insert SUB_CATEGORY n·∫øu ch∆∞a c√≥
    const subCategoryRequest = new sql.Request(transaction);
    await subCategoryRequest
      .input("SubCatID", sql.NVarChar(50), SubCategoryID)
      .input("SubCatName", sql.NVarChar(100), SubCategoryName ?? null)
      .input("SubCatCategoryID", sql.NVarChar(50), CategoryID)
      .query(`
        IF NOT EXISTS (SELECT 1 FROM SUB_CATEGORY WHERE SubCategoryID = @SubCatID)
        BEGIN
          INSERT INTO SUB_CATEGORY (SubCategoryID, CategoryID, SubCategoryName)
          VALUES (@SubCatID, @SubCatCategoryID, @SubCatName)
        END
      `);

    // ‚úÖ Commit n·∫øu th√†nh c√¥ng
    await transaction.commit();
    return { success: true, message: `Th√™m s·∫£n ph·∫©m ${ProductName} th√†nh c√¥ng` };
  } catch (err) {
    // ‚úÖ Rollback an to√†n
    if (transaction._aborted !== true) {
      try {
        await transaction.rollback();
      } catch (rollbackErr) {
        console.error("‚ùå Rollback th·∫•t b·∫°i:", rollbackErr);
      }
    }

    console.error("‚ùå Transaction rollback do l·ªói:", err);
    return {
      success: false,
      message: "L·ªói khi th√™m s·∫£n ph·∫©m, ƒë√£ rollback",
      error: err.message,
    };
  }
};

// =========================L·∫§Y CHI TI·∫æT S·∫¢N PH·∫®M THEO ID====================
/**
 * L·∫•y chi ti·∫øt s·∫£n ph·∫©m t·ª´ b·∫£ng PRODUCT_DETAIL d·ª±a theo DetailID
 * @param {string} detailId - M√£ chi ti·∫øt s·∫£n ph·∫©m (DetailID)
 * @returns {Promise<object|null>} - Tr·∫£ v·ªÅ object chi ti·∫øt s·∫£n ph·∫©m ho·∫∑c null n·∫øu kh√¥ng c√≥
 */
exports.getProductDetailById = async (detailId) => {
  try {
    console.log(detailId)
    const pool = await connectDB();
    const result = await pool.request()
      .input("DetailID", sql.NVarChar(50), detailId)
      .query(`
        SELECT IDDetail, ProductDescription, Ingredient, Usage, HowToUse
        FROM PRODUCT_DETAIL
        WHERE IDDetail = @DetailID
      `);

    if (result.recordset.length > 0) {
      return result.recordset[0]; // ‚úÖ Tr·∫£ v·ªÅ chi ti·∫øt
    } else {
      return null; // ‚ùå Kh√¥ng t√¨m th·∫•y
    }
  } catch (err) {
    console.error("‚ùå L·ªói truy v·∫•n getProductDetailById:", err);
    throw err;
  }
};




