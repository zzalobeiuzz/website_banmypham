import { useNavigate } from "react-router-dom"; // üëà TH√äM v√†o ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng

const ProductDetail = () => {
  const { id } = useParams();
  const { request } = useHttp();
  const loadingRef = useRef();
  const [product, setProduct] = useState(null);
  const [loading, setLoading] = useState(true);
  const [showContent, setShowContent] = useState(false);
  const navigate = useNavigate(); // üëà hook ƒëi·ªÅu h∆∞·ªõng

  useEffect(() => {
    const fetchProduct = async () => {
      try {
        const res = await request(
          "GET",
          `${API_BASE}/api/admin/products/productDetail?code=${id}`
        );
        setProduct(res.data);
        setTimeout(() => {
          setShowContent(true);
          setLoading(false);
        }, 1500);
      } catch (err) {
        console.error("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c chi ti·∫øt s·∫£n ph·∫©m:", err);
      }
    };

    fetchProduct();
  }, [id, request]);

  useEffect(() => {
    if (loadingRef.current && loading) {
      const anim = lottie.loadAnimation({
        container: loadingRef.current,
        renderer: "svg",
        loop: true,
        autoplay: true,
        path: "/animations/Trail loading.json",
      });
      return () => anim.destroy();
    }
  }, [loading]);

  const rawImage = product?.Image;
  const imageUrl =
    typeof rawImage === "string" && rawImage.startsWith("http")
      ? rawImage
      : `${UPLOAD_BASE}/pictures/${rawImage || "default.jpg"}`;

  // üõ†Ô∏è S·ª± ki·ªán x·ª≠ l√Ω n√∫t
  const handleBack = () => navigate(-1);
  const handleEdit = () => navigate(`/admin/products/edit/${product?.id}`);
  const handleDelete = async () => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·∫£n ph·∫©m n√†y kh√¥ng?")) return;
    try {
      await request("DELETE", `${API_BASE}/api/admin/products/delete/${product?.id}`);
      alert("‚úÖ ƒê√£ x√≥a th√†nh c√¥ng!");
      navigate("/admin/products");
    } catch (error) {
      alert("‚ùå X√≥a s·∫£n ph·∫©m th·∫•t b·∫°i");
      console.error(error);
    }
  };

  return (
    <div className="product-detail__container">
      {/* üîº Thanh ƒëi·ªÅu h∆∞·ªõng */}
      <div className="product-detail__header">
        <button onClick={handleBack} className="btn back">‚¨Ö Quay l·∫°i</button>
        <div className="btn-group">
          <button onClick={handleEdit} className="btn edit">‚úèÔ∏è S·ª≠a</button>
          <button onClick={handleDelete} className="btn delete">üóëÔ∏è X√≥a</button>
        </div>
      </div>

      {/* üîÅ Loading */}
      {loading && (
        <div className="product-detail__loading">
          <div ref={loadingRef} className="product-detail__lottie" />
          <p>ƒêang t·∫£i th√¥ng tin s·∫£n ph·∫©m...</p>
        </div>
      )}

      {/* üü¢ Hi·ªÉn th·ªã n·ªôi dung */}
      {!loading && product && (
        <div className="product-detail__wrapper show">
          <div className="product-detail__image">
            <img
              src={imageUrl}
              alt={product?.ProductName || "Kh√¥ng c√≥ t√™n"}
              onError={(e) => {
                e.target.onerror = null;
                e.target.src = "/images/placeholder.png";
              }}
            />
          </div>

          <div className="product-detail__info">
            <h2>{product?.ProductName}</h2>
            <p>
              <strong>Gi√°:</strong>{" "}
              {product?.Price?.toLocaleString("vi-VN", {
                style: "currency",
                currency: "VND",
              })}
            </p>
            <p>
              <strong>T·ªìn kho:</strong> {product?.StockQuantity}
            </p>
            <p>
              <strong>Danh m·ª•c:</strong> {product?.CategoryName}
            </p>
          </div>
        </div>
      )}
    </div>
  );
};
