// üß† Import th∆∞ vi·ªán v√† hook c·∫ßn thi·∫øt
import lottie from "lottie-web"; // üéûÔ∏è Th∆∞ vi·ªán ƒë·ªÉ hi·ªÉn th·ªã animation Lottie
import React, { useEffect, useRef, useState } from "react"; // üì¶ React hooks
import { useParams } from "react-router-dom"; // üîÅ L·∫•y params t·ª´ URL
import { API_BASE, UPLOAD_BASE } from "../../../../../constants"; // üîó C√°c h·∫±ng s·ªë URL API v√† upload
import useHttp from "../../../../../hooks/useHttp"; // üì° Custom hook x·ª≠ l√Ω request
import "./style.scss"; // üé® SCSS ri√™ng cho component

const ProductDetail = () => {
  // üìå L·∫•y m√£ s·∫£n ph·∫©m t·ª´ URL
  const { id } = useParams();

  // üîß D√πng custom hook ƒë·ªÉ g·ªçi API
  const { request } = useHttp();

  // üîÅ Ref DOM d√πng cho animation Lottie
  const loadingRef = useRef();

  // üß† Tr·∫°ng th√°i d·ªØ li·ªáu s·∫£n ph·∫©m
  const [product, setProduct] = useState(null);

  // ‚åõ Tr·∫°ng th√°i loading
  const [loading, setLoading] = useState(true);

  // üëÅÔ∏è Tr·∫°ng th√°i ki·ªÉm so√°t vi·ªác hi·ªÉn th·ªã n·ªôi dung
  const [showContent, setShowContent] = useState(false);

  // üõéÔ∏è G·ªçi API khi component mount ƒë·ªÉ l·∫•y chi ti·∫øt s·∫£n ph·∫©m
  useEffect(() => {
    const fetchProduct = async () => {
      try {
        const res = await request(
          "GET",
          `${API_BASE}/api/admin/products/productDetail?code=${id}`
        );
        setProduct(res.data); // ‚úÖ L∆∞u th√¥ng tin s·∫£n ph·∫©m

        // üïí Delay 1.5 gi√¢y ƒë·ªÉ gi·∫£ l·∫≠p loading v√† ƒë·ªìng b·ªô hi·ªáu ·ª©ng
        setTimeout(() => {
          setShowContent(true); // Hi·ªán n·ªôi dung ch√≠nh
          setLoading(false);    // T·∫Øt tr·∫°ng th√°i loading
        }, 1500);
      } catch (err) {
        console.error("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c chi ti·∫øt s·∫£n ph·∫©m:", err);
      }
    };

    fetchProduct();
  }, [id, request]);

  // üåà G·ªçi animation loading n·∫øu loading = true
  useEffect(() => {
    if (loadingRef.current && loading) {
      const anim = lottie.loadAnimation({
        container: loadingRef.current,
        renderer: "svg",
        loop: true,
        autoplay: true,
        path: "/animations/Trail loading.json", // üîÑ File animation JSON
      });

      // üßπ Cleanup animation khi unmount ho·∫∑c loading = false
      return () => anim.destroy();
    }
  }, [loading]);

  // üñºÔ∏è T·∫°o ƒë∆∞·ªùng d·∫´n ·∫£nh: n·∫øu ƒë√£ l√† URL th√¨ gi·ªØ nguy√™n, n·∫øu kh√¥ng th√¨ th√™m ti·ªÅn t·ªë upload
 

    return (
      <div className="product-detail__container">
        {/* üü° Loading Animation */}
        {loading && (
          <div className="product-detail__loading">
            <div ref={loadingRef} className="product-detail__lottie" />
            <p>ƒêang t·∫£i th√¥ng tin s·∫£n ph·∫©m...</p>
          </div>
        )}
    
        {/* üü¢ Ch·ªâ hi·ªÉn th·ªã sau khi loading xong v√† c√≥ s·∫£n ph·∫©m */}
        {!loading && product && (
          <div className="product-detail__wrapper show">
            {/* H√¨nh ·∫£nh */}
            <div className="product-detail__image">
              <img
                src={imageUrl}
                alt={product?.ProductName || "Kh√¥ng c√≥ t√™n"}
                onError={(e) => {
                  e.target.onerror = null;
                  e.target.src = "/images/placeholder.png";
                }}
              />
            </div>
    
            {/* Th√¥ng tin s·∫£n ph·∫©m */}
            <div className="product-detail__info">
              <h2>{product?.ProductName}</h2>
              <p>
                <strong>Gi√°:</strong>{" "}
                {product?.Price?.toLocaleString("vi-VN", {
                  style: "currency",
                  currency: "VND",
                })}
              </p>
              <p>
                <strong>T·ªìn kho:</strong> {product?.StockQuantity}
              </p>
              <p>
                <strong>Danh m·ª•c:</strong> {product?.CategoryName}
              </p>
            </div>
          </div>
        )}
      </div>
    );
    
};

export default ProductDetail;
