// üß† Import th∆∞ vi·ªán React v√† c√°c hook c·∫ßn thi·∫øt
import lottie from "lottie-web";
import React, { useEffect, useRef, useState } from "react";
import { useParams } from "react-router-dom"; // üîÑ L·∫•y param t·ª´ URL
import { API_BASE, UPLOAD_BASE } from "../../../../../constants"; // üåê URL g·ªëc t·ª´ server
import useHttp from "../../../../../hooks/useHttp"; // üõ†Ô∏è Custom hook g·ªçi API
import "./style.scss"; // üé® CSS cho component

// üì¶ Component hi·ªÉn th·ªã chi ti·∫øt s·∫£n ph·∫©m
const ProductDetail = () => {
  const { id } = useParams(); // üîé L·∫•y m√£ s·∫£n ph·∫©m t·ª´ URL
  const { request } = useHttp(); // Hook g·ªçi API
  const [product, setProduct] = useState(null); // üß© State ch·ª©a th√¥ng tin s·∫£n ph·∫©m
  const [showContent, setShowContent] = useState(false); // ‚è≥ Tr√¨ ho√£n hi·ªÉn th·ªã n·ªôi dung 1s
  const loadingRef = useRef(); // üìç DOM ref cho Lottie animation

  // üéûÔ∏è Load animation loading khi ch∆∞a c√≥ d·ªØ li·ªáu
  useEffect(() => {
  if (!showContent && loadingRef.current) {
    const anim = lottie.loadAnimation({
      container: loadingRef.current,
      renderer: "svg",
      loop: true,
      autoplay: true,
      path: "/animations/Trail loading.json", // üîÅ File animation trong /public
    });

    return () => anim.destroy(); // üí• Xo√° animation khi component unmount
  }
}, [showContent]); // üëà ch·ªâ ph·ª• thu·ªôc showContent


  // üöÄ G·ªçi API l·∫•y chi ti·∫øt s·∫£n ph·∫©m theo m√£
  useEffect(() => {
    const fetchProduct = async () => {
      try {
        const res = await request(
          "GET",
          `${API_BASE}/api/admin/products/productDetail?code=${id}`
        );
        setProduct(res.data); // ‚¨ÖÔ∏è Set d·ªØ li·ªáu

        // ‚è≥ Sau khi c√≥ d·ªØ li·ªáu, ch·ªù 1s r·ªìi m·ªõi hi·ªÉn th·ªã n·ªôi dung
        setTimeout(() => setShowContent(true), 1500);
      } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i chi ti·∫øt s·∫£n ph·∫©m:", error);
      }
    };

    fetchProduct();
  }, [id, request]);

  // üîÑ N·∫øu ch∆∞a c√≥ d·ªØ li·ªáu ho·∫∑c ch∆∞a h·∫øt 1s ‚Üí hi·ªÉn th·ªã animation loading
  if (!product || !showContent) {
    return (
      <div className="product-detail__loading">
        <div
          ref={loadingRef}
          style={{ width: 250, height: 250, margin: "0 auto" }}
        />
        <p style={{ textAlign: "center", marginTop: 12 }}>
          ƒêang t·∫£i th√¥ng tin s·∫£n ph·∫©m...
        </p>
      </div>
    );
  }

  // üì∑ X·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n ·∫£nh s·∫£n ph·∫©m (d√πng tr·ª±c ti·∫øp n·∫øu l√† URL ƒë·∫ßy ƒë·ªß)
  const imageUrl = product.Image?.startsWith("http")
    ? product.Image
    : `${UPLOAD_BASE}/pictures/${product.Image || "default.jpg"}`;

  // ‚úÖ N·∫øu ƒë√£ c√≥ d·ªØ li·ªáu & ch·ªù ƒë·ªß 1s ‚Üí render chi ti·∫øt s·∫£n ph·∫©m
  return (
    <div className="product-detail__wrapper">
      <div className="product-detail__image">
        <img
          src={imageUrl}
          alt={product.ProductName || "Kh√¥ng c√≥ t√™n"}
          onError={(e) => {
            e.target.onerror = null;
            e.target.src = "/images/placeholder.png"; // üß± fallback n·∫øu ·∫£nh l·ªói
          }}
        />
      </div>

      <div className="product-detail__info">
        <h2>{product.ProductName}</h2>
        <p>
          <strong>Gi√°:</strong>{" "}
          {product.Price.toLocaleString("vi-VN", {
            style: "currency",
            currency: "VND",
          })}
        </p>
        <p>
          <strong>T·ªìn kho:</strong> {product.StockQuantity}
        </p>
        <p>
          <strong>Danh m·ª•c:</strong> {product.CategoryName}
        </p>
      </div>
    </div>
  );
};

export default ProductDetail;
