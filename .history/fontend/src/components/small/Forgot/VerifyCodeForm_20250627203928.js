import React, { useEffect, useState } from "react";

const VerifyCodeForm = ({ email, onSubmit, onResend }) => {
  const [code, setCode] = useState("");
  const [newPassword, setNewPassword] = useState("");
  const [countdown, setCountdown] = useState(120); // 120 gi√¢y ƒë·∫øm ng∆∞·ª£c
  const [resending, setResending] = useState(false);
  const [error, setError] = useState("");

  // ‚è±Ô∏è ƒê·∫øm ng∆∞·ª£c th·ªùi gian g·ª≠i l·∫°i m√£
  useEffect(() => {
    if (countdown <= 0) return;
    const timer = setInterval(() => {
      setCountdown((prev) => prev - 1);
    }, 1000);
    return () => clearInterval(timer);
  }, [countdown]);

  const handleResend = async () => {
    setResending(true);
    try {
      await onResend(); // G·ªçi h√†m g·ª≠i l·∫°i m√£ t·ª´ props
      setCountdown(120); // Reset l·∫°i th·ªùi gian
    } catch (err) {
      setError("‚ùå Kh√¥ng th·ªÉ g·ª≠i l·∫°i m√£.");
    }
    setResending(false);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (code.length !== 6) {
      return setError("üî¥ M√£ x√°c th·ª±c ph·∫£i g·ªìm 6 ch·ªØ s·ªë.");
    }
    if (newPassword.length < 6) {
      return setError("üî¥ M·∫≠t kh·∫©u m·ªõi ph·∫£i √≠t nh·∫•t 6 k√Ω t·ª±.");
    }
    setError("");
    await onSubmit(code, newPassword);
  };

  return (
    <section className="verify-section">
      <form onSubmit={handleSubmit}>
        <div className="form-outline mb-3">
          <input
            type="text"
            maxLength="6"
            className="form-control text-center"
            placeholder="Nh·∫≠p m√£ x√°c th·ª±c (6 s·ªë)"
            value={code}
            onChange={(e) => setCode(e.target.value)}
            required
          />
        </div>

        <div className="form-outline mb-3">
          <input
            type="password"
            className="form-control"
            placeholder="Nh·∫≠p m·∫≠t kh·∫©u m·ªõi"
            value={newPassword}
            onChange={(e) => setNewPassword(e.target.value)}
            required
          />
        </div>

        {/* Th√¥ng b√°o l·ªói */}
        {error && <p className="text-danger mb-2">‚ùå {error}</p>}

        {/* N√∫t g·ª≠i l·∫°i m√£ */}
        <div className="d-flex justify-content-between align-items-center mb-3">
          <button
            type="button"
            onClick={handleResend}
            disabled={countdown > 0 || resending}
            className="btn btn-link p-0 text-decoration-none"
          >
            {countdown > 0
              ? `G·ª≠i l·∫°i m√£ sau ${countdown}s`
              : resending
              ? "ƒêang g·ª≠i l·∫°i..."
              : "G·ª≠i l·∫°i m√£"}
          </button>
        </div>

        <button type="submit" className="btn btn-success w-100">
          ƒê·ªïi m·∫≠t kh·∫©u
        </button>
      </form>
    </section>
  );
};

export default VerifyCodeForm;
