import React, { useEffect, useMemo, useState } from "react";
import { API_BASE } from "../../../../constants";
import useHttp from "../../../../hooks/useHttp";
import "./style.scss";

// üí° Component ch√≠nh hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m
const ProductOverviewComponent  = ({ searchKeyword }) => {
    const { request } = useHttp();

    const [categories, setCategories] = useState([]);        // üóÇÔ∏è L∆∞u danh s√°ch danh m·ª•c s·∫£n ph·∫©m t·ª´ API
    const [products, setProducts] = useState([]);            // üì¶ L∆∞u danh s√°ch s·∫£n ph·∫©m t·ª´ API
    const [selectedCategory, setSelectedCategory] = useState("T·∫•t c·∫£"); // üîñ Danh m·ª•c ƒëang ƒë∆∞·ª£c ch·ªçn

    // üéõÔ∏è C√°c state ƒëi·ªÅu khi·ªÉn animation & hi·ªÉn th·ªã danh m·ª•c
    const [filterOpen, setFilterOpen] = useState(false);     // üîÑ B·∫≠t/t·∫Øt panel b·ªô l·ªçc
    const [showFilterContent, setShowFilterContent] = useState(false); // üëÅÔ∏è Hi·ªán/·∫©n n·ªôi dung b·ªô l·ªçc
    const [showCategories, setShowCategories] = useState(true); // ‚úÖ Hi·ªán/·∫©n danh s√°ch danh m·ª•c
    const [containerVisible, setContainerVisible] = useState(true); // üì¶ Hi·ªán/·∫©n container ch·ª©a danh m·ª•c
    const [showCloseButton, setShowCloseButton] = useState(true); // ‚úñÔ∏è Hi·ªán/·∫©n n√∫t ƒë√≥ng danh m·ª•c

    // üü¢ Ch·∫ø ƒë·ªô ch·ªçn v√† ch·ªânh s·ª≠a s·∫£n ph·∫©m
    const [selectMode, setSelectMode] = useState(false);     // ‚úÖ B·∫≠t/t·∫Øt ch·∫ø ƒë·ªô ch·ªçn nhi·ªÅu s·∫£n ph·∫©m
    const [selectedProducts, setSelectedProducts] = useState([]); // ‚úîÔ∏è Danh s√°ch ID s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn
    const [editMode, setEditMode] = useState(false);         // ‚úèÔ∏è B·∫≠t/t·∫Øt ch·∫ø ƒë·ªô ch·ªânh s·ª≠a s·∫£n ph·∫©m

    // ‚ö° Load d·ªØ li·ªáu danh m·ª•c & s·∫£n ph·∫©m
    useEffect(() => {
        
        const fetchData = async () => {
            try {
                const [categoryRes, productRes] = await Promise.all([
                    request("GET", `${API_BASE}/api/user/products/loadCategory`),
                    request("GET", `${API_BASE}/api/user/products/loadAllProducts`),
                ]);
                setCategories(categoryRes.data);
                setProducts(productRes.data);
            } catch (error) {
                console.error("L·ªói t·∫£i d·ªØ li·ªáu:", error);
            }
        };
        fetchData();
    }, [request]);

    // üîç L·ªçc s·∫£n ph·∫©m theo danh m·ª•c & t·ª´ kh√≥a t√¨m ki·∫øm (t·ªëi ∆∞u v·ªõi useMemo)
    const filteredProducts = useMemo(() => {
        return products.filter((product) => {
            // ‚úÖ N·∫øu ch·ªçn "T·∫•t c·∫£" ho·∫∑c ƒë√∫ng danh m·ª•c
            const matchCategory =
                selectedCategory === "T·∫•t c·∫£" || product.CategoryName === selectedCategory;

            // ‚úÖ T√™n ch·ª©a keyword (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng) ho·∫∑c ID ch·ª©a keyword
            const matchKeyword =
                product.ProductName.toLowerCase().includes(searchKeyword.toLowerCase()) ||
                product.ProductID.toString().includes(searchKeyword.toLowerCase());

            // ‚úÖ Tr·∫£ v·ªÅ true n·∫øu tho·∫£ c·∫£ danh m·ª•c v√† keyword
            return matchCategory && matchKeyword;
        });
    }, [products, selectedCategory, searchKeyword]);

    // üîÅ M·ªü danh m·ª•c
    const handleOpen = () => {
        
        setShowCloseButton(true);
        setContainerVisible(true);
        setTimeout(() => setShowCategories(true), 50);
    };

    // ‚ùå ƒê√≥ng danh m·ª•c
    const handleCloseCategories = () => {
        setShowCloseButton(false);
        setShowCategories(false);
        const totalTime = categories.length * 100 + 400; // ‚è≥ Th·ªùi gian ƒë√≥ng (hi·ªáu ·ª©ng)
        setTimeout(() => setContainerVisible(false), totalTime);
    };

    // üîÑ Toggle filter tr√°i
    const handleToggleFilter = () => {
        if (!filterOpen) {
            setFilterOpen(true);
            setTimeout(() => setShowFilterContent(true), 300);
        } else {
            setShowFilterContent(false);
            setFilterOpen(false);
        }
    };

    // üü¢ B·∫≠t/t·∫Øt ch·∫ø ƒë·ªô ch·ªçn nhi·ªÅu
    const handleToggleSelectMode = () => {
        setSelectMode(!selectMode);
        setSelectedProducts([]);
        setEditMode(false); // T·∫Øt edit n·∫øu ƒëang b·∫≠t
    };

    // ‚úîÔ∏è Ch·ªçn/b·ªè ch·ªçn s·∫£n ph·∫©m
    const handleCheckboxChange = (productId) => {
        setSelectedProducts((prev) =>
            prev.includes(productId)
                ? prev.filter((id) => id !== productId)
                : [...prev, productId]
        );
    };

    // üíæ X·ª≠ l√Ω l∆∞u ho·∫∑c chuy·ªÉn sang ch·∫ø ƒë·ªô edit
    const handleEditOrSave = () => {
        if (editMode) {
            console.log("L∆∞u d·ªØ li·ªáu:", products.filter((p) => selectedProducts.includes(p.ProductID)));
            // TODO: G·ªçi API l∆∞u s·∫£n ph·∫©m ·ªü ƒë√¢y n·∫øu c·∫ßn
            setEditMode(false);
            setSelectMode(false);
            setSelectedProducts([]);
        } else {
            if (!selectMode) {
                setSelectMode(true);
                return;
            }

            if (selectedProducts.length === 0) {
                alert("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt s·∫£n ph·∫©m tr∆∞·ªõc khi ch·ªânh s·ª≠a.");
                return;
            }

            setEditMode(true);
        }
    };

    // ‚úèÔ∏è C·∫≠p nh·∫≠t gi√° tr·ªã s·∫£n ph·∫©m local state
    const handleProductChange = (productId, field, value) => {
        setProducts((prev) =>
            prev.map((product) =>
                product.ProductID === productId
                    ? { ...product, [field]: value }
                    : product
            )
        );
    };

    return (
        <div className="product-wrapper">
            {/* üè∑Ô∏è Thanh danh m·ª•c tr√™n */}
            <div className="product-topbar">
                {!containerVisible && (
                    <button className="toggle-button" onClick={handleOpen}>
                        M·ªü danh m·ª•c ‚ûú
                    </button>
                )}

                {containerVisible && (
                    <div className="category-buttons">
                        {/* T·∫•t c·∫£ */}
                        <button
                            onClick={() => setSelectedCategory("T·∫•t c·∫£")}
                            style={{
                                transition: "all 0.4s ease",
                                transitionDelay: showCategories ? "0s" : `${categories.length * 0.1}s`,
                                transform: showCategories ? "translateX(0)" : "translateX(-20px)",
                                opacity: showCategories ? 1 : 0,
                            }}
                        >
                            T·∫•t c·∫£
                        </button>

                        {/* C√°c danh m·ª•c */}
                        {categories.map((category, index) => (
                            <button
                                key={category.CategoryID}
                                onClick={() => setSelectedCategory(category.CategoryName)}
                                style={{
                                    transition: "all 0.4s ease",
                                    transitionDelay: showCategories ? `${index * 0.1}s` : `${(categories.length - index) * 0.1}s`,
                                    transform: showCategories ? "translateX(0)" : "translateX(-20px)",
                                    opacity: showCategories ? 1 : 0,
                                }}
                            >
                                {category.CategoryName}
                            </button>
                        ))}

                        {/* ƒê√≥ng */}
                        {showCloseButton && (
                            <button
                                className="close-button"
                                onClick={handleCloseCategories}
                                style={{
                                    transition: "all 0.4s ease",
                                    transitionDelay: showCategories ? `${categories.length * 0.1 + 0.1}s` : `${categories.length * 0.1 + 0.1}s`,
                                    transform: showCategories ? "translateX(0)" : "translateX(-20px)",
                                    opacity: showCategories ? 1 : 0,
                                }}
                            >
                                ‚úñ ƒê√≥ng
                            </button>
                        )}
                    </div>
                )}
            </div>

            {/* ====================== */}
            {/* N·ªôi dung ch√≠nh */}
            {/* ====================== */}
            <div className={`product-content ${filterOpen ? "open" : ""}`}>
                <div className="product-left">
                    {/* ‚öôÔ∏è C√°c n√∫t ch·ª©c nƒÉng */}
                    <button onClick={handleToggleSelectMode}>
                        {selectMode ? "Hu·ª∑ ch·ªçn" : "Ch·ªçn s·∫£n ph·∫©m"}
                    </button>
                    <button onClick={handleEditOrSave}>
                        {editMode ? "L∆∞u" : "Ch·ªânh s·ª≠a"}
                    </button>
                    <button>X√≥a</button>
                    <button>Xu·∫•t Excel</button>

                    {/* B·ªô l·ªçc */}
                    <div className="filter-toggle-header" onClick={handleToggleFilter}>
                        {!filterOpen ? (
                            <>
                                <img
                                    src="/assets/icons/icons8-filter.gif"
                                    alt="filter icon"
                                    style={{ width: "24px", height: "24px" }}
                                />
                                <span>M·ªü b·ªô l·ªçc</span>
                            </>
                        ) : (
                            <span>‚úñ B·ªô l·ªçc s·∫£n ph·∫©m</span>
                        )}
                    </div>

                    {showFilterContent && (
                        <div className="filter-body">
                            <p>ƒê√¢y l√† c√°c t√πy ch·ªçn l·ªçc...</p>
                        </div>
                    )}
                </div>

                <div className="product-right">
                    <div className="content">
                        <div className="product-data">
                            {/* Header c·ªôt */}
                            <ul className="field-name list-unstyled">
                                <li className="field-col list-stt">STT</li>
                                <li className="field-col list-id">ID SP</li>
                                <li className="field-col list-name">T√™n s·∫£n ph·∫©m</li>
                                <li className="field-col list-image">·∫¢nh</li>
                                <li className="field-col list-price">Gi√°</li>
                                <li className="field-col list-category">Danh m·ª•c</li>
                                <li className="field-col list-stock">T·ªìn kho</li>
                            </ul>

                            {/* Danh s√°ch s·∫£n ph·∫©m */}
                            <div className="data">
                                {filteredProducts.map((product, index) => (
                                    <ul key={product.ProductID} className="list-unstyled row-data">
                                        <li className="list-stt">
                                            {selectMode && (
                                                <input
                                                    type="checkbox"
                                                    checked={selectedProducts.includes(product.ProductID)}
                                                    onChange={() => handleCheckboxChange(product.ProductID)}
                                                />
                                            )}
                                            {index + 1}
                                        </li>
                                        <li className="list-id">{product.ProductID}</li>
                                        <li className="list-name">
                                            {editMode && selectedProducts.includes(product.ProductID) ? (
                                                <textarea
                                                    className="input-name"
                                                    value={product.ProductName}
                                                    onChange={(e) =>
                                                        handleProductChange(product.ProductID, "ProductName", e.target.value)
                                                    }
                                                />
                                            ) : (
                                                product.ProductName
                                            )}
                                        </li>
                                        <li className="list-image">
                                            <img
                                                src={`/assets/pictures/${product.Image}`}
                                                alt={product.ProductName}
                                                width="70"
                                            />
                                        </li>
                                        <li className="list-price">
                                            {editMode && selectedProducts.includes(product.ProductID) ? (
                                                <input
                                                    className="input-price"
                                                    value={product.Price}
                                                    onChange={(e) =>
                                                        handleProductChange(product.ProductID, "Price", Number(e.target.value))
                                                    }
                                                />
                                            ) : (
                                                `${product.Price.toLocaleString("vi-VN")}ƒë`
                                            )}
                                        </li>
                                        <li className="list-category">{product.CategoryName}</li>
                                        <li className="list-stock">
                                            {product.StockQuantity}
                                            <button className="view-detail">Xem chi ti·∫øt</button>
                                        </li>
                                    </ul>
                                ))}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

// ‚úÖ D√πng React.memo ƒë·ªÉ tr√°nh render l·∫°i khi props kh√¥ng ƒë·ªïi
export const ProductOverview = React.memo(ProductOverviewComponent);
